{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/mnt/d/dev/github-social/screens/Followers.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { not } from 'react-native-reanimated';\nexport default function followers(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      followers = _useState2[0],\n      setFollowers = _useState2[1];\n\n  var _useState3 = useState(\"Loading\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadS = _useState4[0],\n      setLoadS = _useState4[1];\n\n  var user = navigation.state.params.user;\n  useEffect(function () {\n    loadData().catch(console.log);\n  }, []);\n\n  if (loadS === \"NotFound\") {\n    return React.createElement(View, {\n      style: {\n        backgroundColor: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    }, \"User not Found!\"));\n  } else if (loadS === \"NoFriends\") {\n    return React.createElement(View, {\n      style: {\n        backgroundColor: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, \"User has no friends! :(\"));\n  } else if (loadS === \"Loading\") {\n    return React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, followers.map(function (follower) {\n    return React.createElement(TouchableWithoutFeedback, {\n      key: follower.id,\n      onPress: function onPress() {\n        return navigation.push('followers', {\n          user: follower.login\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        backgroundColor: 'ghostwhite'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 19\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: follower.avatar_url\n      },\n      style: styles.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }\n    }), React.createElement(View, {\n      style: {\n        flex: 1,\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      style: styles.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, follower.login), React.createElement(Text, {\n      style: styles.bio,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }, follower.bio))));\n  })));\n\n  function loadData() {\n    var data, _iterator, _step, follower;\n\n    return _regeneratorRuntime.async(function loadData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://api.github.com/users/\" + user + \"/followers\").then(function (res) {\n              return res.json();\n            }).catch(function () {\n              throw error;\n            }));\n\n          case 2:\n            data = _context.sent;\n\n            if (!(\"message\" in data)) {\n              _context.next = 7;\n              break;\n            }\n\n            setLoadS(\"NotFound\");\n            _context.next = 21;\n            break;\n\n          case 7:\n            if (!(data.length == 0)) {\n              _context.next = 11;\n              break;\n            }\n\n            setLoadS(\"NoFriends\");\n            _context.next = 21;\n            break;\n\n          case 11:\n            _iterator = _createForOfIteratorHelperLoose(data);\n\n          case 12:\n            if ((_step = _iterator()).done) {\n              _context.next = 19;\n              break;\n            }\n\n            follower = _step.value;\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(fetch(follower.url).then(function (data) {\n              return data.json();\n            }).then(function (data) {\n              return data.bio;\n            }));\n\n          case 16:\n            follower.bio = _context.sent;\n\n          case 17:\n            _context.next = 12;\n            break;\n\n          case 19:\n            setFollowers(data);\n            setLoadS(\"Done\");\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'black'\n  },\n  username: {\n    fontSize: 20,\n    textAlign: 'center'\n  },\n  bio: {\n    justifyContent: 'flex-start'\n  },\n  image: {\n    width: 100,\n    height: 100\n  }\n});","map":{"version":3,"sources":["/mnt/d/dev/github-social/screens/Followers.js"],"names":["React","useState","useEffect","not","followers","navigation","setFollowers","loadS","setLoadS","user","state","params","loadData","catch","console","log","backgroundColor","styles","username","flex","container","map","follower","id","push","login","flexDirection","uri","avatar_url","image","justifyContent","alignItems","bio","fetch","then","res","json","error","data","length","url","StyleSheet","create","fontSize","textAlign","width","height"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {ActivityIndicator, Dimensions, StyleSheet, Text, View, ScrollView, Image, TouchableWithoutFeedback} from 'react-native';\r\nimport { not } from 'react-native-reanimated';\r\n\r\nexport default  function followers({navigation}) {\r\n    const [followers, setFollowers] = useState([]);\r\n    const [loadS, setLoadS] = useState(\"Loading\");\r\n    const user = navigation.state.params.user\r\n    useEffect(() => {\r\n      loadData().catch(console.log)\r\n    },[]);\r\n    if(loadS === \"NotFound\") {\r\n      return(\r\n        <View style={{backgroundColor:'white'}}>\r\n            <Text style={styles.username}>User not Found!</Text>\r\n        </View>\r\n    );\r\n    }\r\n    else if(loadS === \"NoFriends\") {\r\n      return(\r\n        <View style={{backgroundColor:'white'}}>\r\n            <Text style={styles.username}>User has no friends! :(</Text>\r\n        </View>\r\n      )\r\n    }\r\n    else if(loadS === \"Loading\") {\r\n      return(\r\n        <ActivityIndicator size=\"large\" color=\"red\"/>\r\n      )\r\n    }\r\n    return (\r\n      <View style={{flex: 1}}>\r\n        \r\n        <ScrollView style={styles.container}>{\r\n          followers.map((follower) => {\r\n            return(\r\n                <TouchableWithoutFeedback  key={follower.id}  onPress={() => navigation.push('followers', {user : follower.login})}>\r\n                  <View style={{flexDirection: 'row', backgroundColor: 'ghostwhite'}}>\r\n                  <Image source={{uri: follower.avatar_url}} style={styles.image}/>\r\n                  <View style={{flex : 1, flexDirection : 'column', justifyContent : 'flex-start', alignItems:'center'}}>\r\n                    <Text style={styles.username}>{follower.login}</Text>\r\n                    <Text style={styles.bio}>{follower.bio}</Text>\r\n                  </View>\r\n                  </View>\r\n                </TouchableWithoutFeedback>\r\n            )\r\n          })\r\n        }</ScrollView>\r\n      </View>\r\n    );\r\n  \r\n    async function loadData() {\r\n      const data = await fetch(\"https://api.github.com/users/\" + user + \"/followers\").then(res=>res.json()).catch(function(){\r\n        throw error;\r\n      });\r\n      if(\"message\" in data) {\r\n          setLoadS(\"NotFound\");\r\n      }\r\n      else if(data.length == 0) {\r\n        setLoadS(\"NoFriends\");\r\n      }\r\n      else {\r\n        for(let follower of data) {\r\n          follower.bio = await fetch(follower.url).then(data => data.json()).then(data=>data.bio)\r\n        }\r\n        setFollowers(data);\r\n        setLoadS(\"Done\");\r\n      }\r\n    }\r\n  }\r\n  \r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      backgroundColor: 'black',\r\n    },\r\n    username: {\r\n      fontSize: 20,\r\n      textAlign: 'center',\r\n    },\r\n    bio : {\r\n      justifyContent:'flex-start',\r\n    },\r\n    image: {\r\n      width: 100,\r\n      height: 100,\r\n    }\r\n  });"]},"metadata":{},"sourceType":"module"}